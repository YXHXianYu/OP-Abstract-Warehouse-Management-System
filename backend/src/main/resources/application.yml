#DB Configuration:
#?????

# ????MySQL8????????????????cj
spring:
  data:
    redis:
      database: 0
      host: 121.40.90.193
      port: 6379
      password: 114514
      timeout: 1000



  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    # jdbc:mysql://{{ip}}:{{port}}/{{database_name}}?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
    url: jdbc:mysql://121.40.90.193:3306/test_database?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
    # database username
    username: root
    # database password
    password: MySQL_2024JACKY
  jpa:
    database: mysql
    show-sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update
      naming_strategy: org.hibernate.cfg.ImprovedNamingStrategy
    open-in-view: true

  kafka:
    bootstrap-servers: ${KAFKA_HOST:8.140.250.103}:${KAFKA_PORT:9092} #这个是kafka的地址,对应你server.properties中配置的
    producer:
      batch-size: 16384 #批量大小
      acks: -1 #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      retries: 10 # 消息发送重试次数
      #      transaction-id-prefix:  tx_1 #事务id前缀
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        linger:
          ms: 2000 #提交延迟
    #        partitioner: #指定分区器
    #          class: com.example.kafkademo.config.CustomizePartitioner
    consumer:
      group-id: testGroup #默认的消费组ID
      enable-auto-commit: true #是否自动提交offset
      auto-commit-interval: 2000 #提交offset延时
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      max-poll-records: 1 #单次拉取消息的最大条数
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session:
          timeout:
            ms: 120000 # 消费会话超时时间（超过这个时间 consumer 没有发送心跳，就会触发 rebalance 操作）
        request:
          timeout:
            ms: 18000 # 消费请求的超时时间
    listener:
      missing-topics-fatal: false # consumer listener topics 不存在时，启动项目就会报错
      type: batch #设置批量消费



################################
# JWT ??
################################
security:
  # ??
  secret: spring-boot-learning-examples
  # ?????????1??
  access-expires: 86400
  # ?????????30??
  refresh-expires: 2592000
  # ???
  white-list: /user/login,/user/register,/user/refresh



